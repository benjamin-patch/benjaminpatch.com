<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Benjamin Patch</title><link href="https://www.benjaminpatch.com/" rel="alternate"></link><link href="https://www.benjaminpatch.com/feeds/all.atom.xml" rel="self"></link><id>https://www.benjaminpatch.com/</id><updated>2025-02-04T23:50:00-08:00</updated><subtitle>Guides for Building Ethical &amp; Impactful AI Software</subtitle><entry><title>Simple Python Virtual Environments: Linux and Mac</title><link href="https://www.benjaminpatch.com/posts/2025/Jan/30/simple-python-virtual-environments-linux-mac/" rel="alternate"></link><published>2025-01-30T17:32:00-08:00</published><updated>2025-02-04T23:50:00-08:00</updated><author><name>Benjamin Patch</name></author><id>tag:www.benjaminpatch.com,2025-01-30:/posts/2025/Jan/30/simple-python-virtual-environments-linux-mac/</id><summary type="html">&lt;p&gt;Python is the most widely used programming language for projects involving artificial intelligence and machine learning. But regardless of what you use Python for, virtual environments are critical to essentially all development workflows. In this guide, you will learn why virtual environments are important and how to create and manage them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is the most widely used programming language for projects involving artificial intelligence and machine learning. But regardless of what you use Python for, virtual environments are critical to essentially all development workflows. In this guide, you will learn why virtual environments are important and how to create and manage them.&lt;/p&gt;
&lt;p&gt;Specifically, we will cover the installation, configuration, and basic use of &lt;code&gt;pyenv&lt;/code&gt; to manage numerous versions of Python on your system. We will also explain how to use &lt;code&gt;venv&lt;/code&gt; to create, activate, deactivate, and remove virtual Python environments. Finally, we will cover the management of external dependencies with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The combination of these three tools will help us create simple, clean, and flexible virtual environments for a wide range of Python projects. Let’s walk through the process together.&lt;/p&gt;
&lt;h2&gt;Why Virtual Environments?&lt;/h2&gt;
&lt;p&gt;It is best practice to create virtual environments to isolate project dependencies from the global Python installation and other projects. Imagine a situation where you are working on one project that is targeting the most recent version of Python and external packages. But you also inherited another project from other developers who wrote the code years ago for a much older version of Python and external packages.&lt;/p&gt;
&lt;p&gt;By isolating the development environments for each of these projects, you can prevent conflicts between them and ensure each project runs with the specific version of Python and external packages it requires. Plus, you can quickly swap out versions of Python and dependencies to see if it leads to any problems.&lt;/p&gt;
&lt;p&gt;Perhaps that old project only needs a few minor tweaks to run in modern environments. Maybe it will become more performant and secure with the upgrade. Virtual development environments can help you find out.&lt;/p&gt;
&lt;h2&gt;A Note for My Windows Friends&lt;/h2&gt;
&lt;p&gt;This guide is written for setting up virtual environments on Linux and macOS because that is where I spend most of my time. While some of these tools will work on Windows, it is not recommended. As noted in the documentation for the first tool we will be discussing, &lt;code&gt;pyenv&lt;/code&gt;:&lt;/p&gt;
&lt;style&gt;
blockquote {
    overflow: hidden;
    padding: 0 0 0 26px;
    position: relative;
}
blockquote:before {
    content: "";
    border-left: 6px solid #0d6efd;
    position: absolute;
    bottom: 8px;
    top: 0px;
    left: 0;
}
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; does not officially support Windows and does not work in Windows outside the Windows Subsystem for Linux. Moreover, even there, the Pythons it installs are not native Windows versions but rather Linux versions running in a virtual machine -- so you won't get Windows-specific functionality.&lt;/p&gt;
&lt;p&gt;If you're in Windows, we recommend using @kirankotari's &lt;a href="https://github.com/pyenv-win/pyenv-win"&gt;pyenv-win&lt;/a&gt; fork -- which does install native Windows Python versions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After &lt;code&gt;pyenv-win&lt;/code&gt; is installed and running Python on your Windows machine, you should be able to join us later in this guide in the &lt;a href="#use-venv-to-create-virtual-environments"&gt;Use venv to Create Virtual Environments&lt;/a&gt; section since everything after that is done within Python itself.&lt;/p&gt;
&lt;p&gt;Just keep in mind the syntax differences between running Python commands on Windows as compared to Linux and macOS. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;--version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# run Python commands on Linux and macOS&lt;/span&gt;
py&lt;span class="w"&gt; &lt;/span&gt;--version&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# run the same Python command on Windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Install pyenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; is the gold standard for managing multiple Python versions on your system. It allows you to easily install and switch between different Python interpreters globally or on a per-project level. It is simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well. Let's start by getting &lt;code&gt;pyenv&lt;/code&gt; installed.&lt;/p&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;On your Linux distro of choice, run the following terminal command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-fsSL&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;https://pyenv.run&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;macOS&lt;/h3&gt;
&lt;p&gt;On macOS, the Linux command above should work but using the Homebrew package manager is recommended by the developers of &lt;code&gt;pyenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don't already have Homebrew running on your Mac, then please follow the installation instructions from &lt;a href="https://brew.sh/"&gt;Homebrew's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Homebrew installed on your Mac, run the following terminal commands to update Homebrew itself and install &lt;code&gt;pyenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;As noted above, this guide is written for Linux and macOS. Windows users are encouraged to use &lt;a href="https://github.com/pyenv-win/pyenv-win"&gt;pyenv-win&lt;/a&gt; instead. Detailed installation and usage instructions can be found in that project's documentation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Shell Configurations&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;pyenv&lt;/code&gt; installed, it now needs to be configured for your terminal’s shell. This guide covers the three most common shells: Bash, Zsh, and Fish. If you are not sure which shell your system is using, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it will tell you. Then follow the steps outlined in the appropriate section below.&lt;/p&gt;
&lt;p&gt;To learn more about shells, please see this informative article from TheLinuxCode: &lt;a href="https://thelinuxcode.com/linux-shells-for-beginners-bash-zsh-and-fish-explained-and-compared/"&gt;Linux Shells for Beginners – Bash, Zsh, and Fish Explained and Compared&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bash&lt;/h3&gt;
&lt;p&gt;Bash (Bourne Again SHell) ships as the default shell on most Linux distros and older Macs.&lt;/p&gt;
&lt;p&gt;If you are not using Bash, please skip this section.&lt;/p&gt;
&lt;p&gt;Stock Bash startup files vary widely between Linux distributions. So, the most reliable way to get &lt;code&gt;pyenv&lt;/code&gt; working in all environments is to append configuration commands to both &lt;code&gt;.bashrc&lt;/code&gt; (for interactive shells) and the profile file that Bash would use (for login shells).&lt;/p&gt;
&lt;p&gt;First, add the following commands to &lt;code&gt;~/.bashrc&lt;/code&gt; by running the following in your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, if you have &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.bash_login&lt;/code&gt;, add the commands there as well. If you have none of these, create a &lt;code&gt;~/.profile&lt;/code&gt; and add the commands there.&lt;/p&gt;
&lt;p&gt;Run for &lt;code&gt;~/.profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run for &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Zsh&lt;/h3&gt;
&lt;p&gt;Zsh (Z SHell) ships as the default shell on newer Macs and a few Linux distros. But if desired, virtually any Linux distro can be configured to run Zsh.&lt;/p&gt;
&lt;p&gt;If you are not using Zsh, please skip this section.&lt;/p&gt;
&lt;p&gt;For Zsh shells, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - zsh)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Fish&lt;/h3&gt;
&lt;p&gt;As far as I know, Fish (Friendly Interactive Shell) does not ship as the default shell on any major Linux distros or macOS. It must be installed manually.&lt;/p&gt;
&lt;p&gt;If you are not using Fish, please skip this section.&lt;/p&gt;
&lt;p&gt;If you have Fish 3.2.0 or newer, execute this interactively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ux&lt;span class="w"&gt; &lt;/span&gt;PYENV_ROOT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.pyenv
fish_add_path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Otherwise, execute this snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ux&lt;span class="w"&gt; &lt;/span&gt;PYENV_ROOT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.pyenv
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;fish_user_paths&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;/bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$fish_user_paths&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, add this to &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;fish&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Restart Your Shell&lt;/h2&gt;
&lt;p&gt;Regardless of which shell you are using, for the &lt;code&gt;PATH&lt;/code&gt; changes to take effect, the shell must restart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Install Python Build Dependencies&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; will try its best to download and compile the desired Python version. Still, sometimes the compilation fails because of unmet system dependencies, or the compilation succeeds but the new Python version exhibits strange failures at runtime. The following instructions are the developer's recommendations for a sane build environment.&lt;/p&gt;
&lt;p&gt;Please only apply the following instructions for your OS and skip the others.&lt;/p&gt;
&lt;h3&gt;macOS&lt;/h3&gt;
&lt;p&gt;If you haven't already done so, please install Xcode Command Line Tools (&lt;code&gt;xcode-select --install&lt;/code&gt;) and &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;. Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;readline&lt;span class="w"&gt; &lt;/span&gt;sqlite3&lt;span class="w"&gt; &lt;/span&gt;xz&lt;span class="w"&gt; &lt;/span&gt;zlib&lt;span class="w"&gt; &lt;/span&gt;tcl-tk@8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Fedora 22+&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;zlib-devel&lt;span class="w"&gt; &lt;/span&gt;bzip2&lt;span class="w"&gt; &lt;/span&gt;bzip2-devel&lt;span class="w"&gt; &lt;/span&gt;readline-devel&lt;span class="w"&gt; &lt;/span&gt;sqlite&lt;span class="w"&gt; &lt;/span&gt;sqlite-devel&lt;span class="w"&gt; &lt;/span&gt;openssl-devel&lt;span class="w"&gt; &lt;/span&gt;tk-devel&lt;span class="w"&gt; &lt;/span&gt;libffi-devel&lt;span class="w"&gt; &lt;/span&gt;xz-devel&lt;span class="w"&gt; &lt;/span&gt;libuuid-devel&lt;span class="w"&gt; &lt;/span&gt;gdbm-libs&lt;span class="w"&gt; &lt;/span&gt;libnsl2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Fedora Silverblue&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;toolbox&lt;span class="w"&gt; &lt;/span&gt;enter
sudo&lt;span class="w"&gt; &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;vte-profile&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# &amp;lt;https://github.com/containers/toolbox/issues/390&amp;gt;&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@Development Tools&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;zlib-devel&lt;span class="w"&gt; &lt;/span&gt;bzip2&lt;span class="w"&gt; &lt;/span&gt;bzip2-devel&lt;span class="w"&gt; &lt;/span&gt;readline-devel&lt;span class="w"&gt; &lt;/span&gt;sqlite&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;
sqlite-devel&lt;span class="w"&gt; &lt;/span&gt;openssl-devel&lt;span class="w"&gt; &lt;/span&gt;xz&lt;span class="w"&gt; &lt;/span&gt;xz-devel&lt;span class="w"&gt; &lt;/span&gt;libffi-devel&lt;span class="w"&gt; &lt;/span&gt;findutils&lt;span class="w"&gt; &lt;/span&gt;tk-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Ubuntu / Debian / Mint&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;build-essential&lt;span class="w"&gt; &lt;/span&gt;libssl-dev&lt;span class="w"&gt; &lt;/span&gt;zlib1g-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;
libbz2-dev&lt;span class="w"&gt; &lt;/span&gt;libreadline-dev&lt;span class="w"&gt; &lt;/span&gt;libsqlite3-dev&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;
libncursesw5-dev&lt;span class="w"&gt; &lt;/span&gt;xz-utils&lt;span class="w"&gt; &lt;/span&gt;tk-dev&lt;span class="w"&gt; &lt;/span&gt;libxml2-dev&lt;span class="w"&gt; &lt;/span&gt;libxmlsec1-dev&lt;span class="w"&gt; &lt;/span&gt;libffi-dev&lt;span class="w"&gt; &lt;/span&gt;liblzma-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If your OS is not listed here, please see the &lt;a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment"&gt;complete documentation of suggested build environments&lt;/a&gt; from the developers of &lt;code&gt;pyenv&lt;/code&gt; itself.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;List and Install Python Versions with pyenv&lt;/h2&gt;
&lt;p&gt;With your shell configured and Python build dependencies installed, let’s now ask &lt;code&gt;pyenv&lt;/code&gt; to list all Python versions it knows about. This is a long list, so you might want to use a regular expression to narrow it down.&lt;/p&gt;
&lt;p&gt;In this case, we are asking for a list of all available Python versions from 3.12 to 3.14:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3\\.1[234]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have found your desired version(s) of Python, it/they can be installed with a single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# installs Python version 3.13.1&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# installs Python version 3.9.17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Allow the installation(s) to complete.&lt;/p&gt;
&lt;p&gt;Repeat for additional Python versions if needed.&lt;/p&gt;
&lt;h2&gt;Verify Installation(s)&lt;/h2&gt;
&lt;p&gt;This command will list the versions of Python pyenv has access to on your system. It also tells you which version is currently used by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; indicates which version is set to run by default. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*&lt;span class="w"&gt; &lt;/span&gt;system&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/.pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.1
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Set a Global or Local Python Version&lt;/h2&gt;
&lt;p&gt;If desired, you can make this new version of Python the global or local default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.1&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# set a global default&lt;/span&gt;
&lt;span class="c1"&gt;# OR&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# set for a specific project directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;pyenv versions&lt;/code&gt; again, and you will see the output has changed to your selected version of Python. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;system
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.1&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/.pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Return to System Python&lt;/h2&gt;
&lt;p&gt;If you want to return to your system's stock version of Python, just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Uninstall a Particular Python Version&lt;/h2&gt;
&lt;p&gt;To remove a specific version of Python from &lt;code&gt;pyenv&lt;/code&gt;, simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;uninstall&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# to uninstall Python version 3.9.17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a id="use-venv-to-create-virtual-environments"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Use venv to Create Virtual Environments&lt;/h2&gt;
&lt;p&gt;Advantages of &lt;code&gt;venv&lt;/code&gt; over the older &lt;code&gt;virtualenv&lt;/code&gt; option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Standard Library:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; is part of the Python 3 standard library, so you don't need to install it separately.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lightweight:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; creates environments by creating symbolic links (or copying in some cases) to the base Python installation, making the environments smaller and faster to create than those of &lt;code&gt;virtualenv&lt;/code&gt;, which often copies the entire Python interpreter into the virtual environment's directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensible:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; environments can be extended and customized. You can use &lt;code&gt;pip&lt;/code&gt; to install any packages you need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolated:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; provides proper isolation for your project's dependencies from other Python projects on your system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; It is the officially recommended method to create virtual environments in Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create the virtual environment, navigate to your project directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command to create a new environment is as follows. This command will use the Python interpreter that &lt;code&gt;pyenv&lt;/code&gt; has made active (either globally or locally) to create the environment.&lt;/p&gt;
&lt;p&gt;For Linux and macOS, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv&lt;span class="o"&gt;[&lt;/span&gt;-optional-python-version-number&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new directory called &lt;code&gt;.venv-3.13.1&lt;/code&gt; (for example) at the top level of your project. I like to add the Python version number after &lt;code&gt;.venv&lt;/code&gt; so it is clear exactly which version of Python this virtual environment runs.&lt;/p&gt;
&lt;p&gt;You can choose to name this directory anything you would like. But some variant of &lt;code&gt;.venv&lt;/code&gt; is recommended.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Activate the Virtual Environment&lt;/h2&gt;
&lt;p&gt;From the project's root directory, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your-venv-directory&lt;span class="o"&gt;]&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And your terminal should indicate the environment is now active.&lt;/p&gt;
&lt;h2&gt;Install Python Packages&lt;/h2&gt;
&lt;p&gt;With your virtual environment activated, install any Python packages your project requires:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# packages required for your project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you install Python packages, they will only run while this virtual environment is active, effectively isolating your project dependencies from the rest of your system.&lt;/p&gt;
&lt;p&gt;Proceed to build and test your Python program as normal.&lt;/p&gt;
&lt;h2&gt;Deactivate the Virtual Environment&lt;/h2&gt;
&lt;p&gt;When you are finished with your coding session, deactivate the virtual environment with this simple command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If needed, you can then switch to another virtual environment running a different version of Python and/or packages to see how these new environments affect your program. &lt;/p&gt;
&lt;h2&gt;Remove a Virtual Environment&lt;/h2&gt;
&lt;p&gt;Since we created the environment in a sub-directory of our project, simply delete the &lt;code&gt;.venv&lt;/code&gt; directory to remove the virtual environment. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/project/.venv-3.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Go Further with venv&lt;/h2&gt;
&lt;p&gt;For more information about using &lt;code&gt;venv&lt;/code&gt;, I recommend starting with the official documentation:  &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv - Creation of Virtual Environments - docs.python.org&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Basic Dependency Declaration with pip&lt;/h2&gt;
&lt;p&gt;Most Python programs make use of external packages and modules. To ensure your program has the correct version of everything it needs to run properly, it’s a good idea to formally declare all dependencies in a way that can easily be updated and reproduced on another system or new virtual environment.&lt;/p&gt;
&lt;p&gt;Fortunately, Python’s standard package manager &lt;code&gt;pip&lt;/code&gt; makes this easy.&lt;/p&gt;
&lt;h2&gt;Generate a requirements.txt File&lt;/h2&gt;
&lt;p&gt;After our packages are installed, all we need to do is use &lt;code&gt;pip&lt;/code&gt; to generate a &lt;code&gt;requirements.txt&lt;/code&gt; file. This file lists all the installed packages and their versions. To do this, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anytime your dependencies change, simply re-run the command above, and &lt;code&gt;requirements.txt&lt;/code&gt; will update.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt; can then be used to install the correct version of all dependencies in a new virtual environment or on an entirely new system by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;pip&lt;/code&gt; does not record the version of Python running in this environment. I recommend adding this as a note on your project’s &lt;code&gt;README&lt;/code&gt; or other documentation so you and others have a record of the exact environment variables of when the program was built and tested.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;In Summary&lt;/h2&gt;
&lt;p&gt;For managing multiple Python versions on your system while creating isolated development environments, using &lt;code&gt;pyenv&lt;/code&gt; along with &lt;code&gt;venv&lt;/code&gt; is the recommended and most straightforward approach. Once the virtual environment is running, using &lt;code&gt;pip&lt;/code&gt; to create and update the &lt;code&gt;requirements.txt&lt;/code&gt; file is a simple way to ensure all dependencies can easily be reproduced.&lt;/p&gt;
&lt;p&gt;This guide has helped us create a simple, clean, and flexible virtual development environment.&lt;/p&gt;
&lt;p&gt;If you found this helpful and would like me to write guides for more advanced dependency management with tools like &lt;a href="https://packaging.python.org/en/latest/tutorials/managing-dependencies/"&gt;Pipenv&lt;/a&gt; or &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;, please contact me on Bluesky &lt;a href="https://bsky.app/profile/benjaminpatch.com"&gt;@benjaminpatch.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading and I wish you the best in creating and managing all of your Python virtual environments!&lt;/p&gt;
&lt;h2&gt;Additional Information and Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#simple-python-version-management-pyenv"&gt;pyenv Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv/wiki"&gt;pyenv Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-virtual-environments-a-primer/"&gt;Python Virtual Environments: A Primer - realpython.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv Documentation - python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/cli/pip_freeze/"&gt;pip freeze - Python Packaging Authority&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="AI in Practice"></category><category term="python"></category><category term="virtual environments"></category><category term="best practices"></category></entry><entry><title>The Journey of Artificial Intelligence</title><link href="https://www.benjaminpatch.com/posts/2024/Dec/18/journey-of-artificial-intelligence/" rel="alternate"></link><published>2024-12-18T12:24:00-08:00</published><updated>2024-12-18T12:24:00-08:00</updated><author><name>Benjamin Patch</name></author><id>tag:www.benjaminpatch.com,2024-12-18:/posts/2024/Dec/18/journey-of-artificial-intelligence/</id><summary type="html">&lt;p&gt;AI has become a cornerstone of modern technology, impacting virtually every industry in today's economy. But how did we get here? Let’s explore its fascinating history, from the coining of the term to the rise of machine learning, artificial neural networks, and generative AI.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Artificial intelligence (AI) has become a cornerstone of modern technology, impacting virtually every industry in today's economy. But how did we get here?&lt;/p&gt;
&lt;p&gt;The journey of AI spans decades of experimentation, breakthroughs, and debates. Let’s explore its fascinating history, from the coining of the term to the rise of machine learning, artificial neural networks, and generative AI.&lt;/p&gt;
&lt;h2&gt;Defining Intelligence&lt;/h2&gt;
&lt;p&gt;At its core, AI refers to systems that exhibit behavior that we would typically associate with human intelligence. However, defining human intelligence itself is a complex task. Intelligence manifests itself in a wide variety of forms such as artistic expression, mathematical prowess, and problem-solving skills just to name a few. Plus, there's no universal standard for measurement – making it difficult to definitively label a computer as "intelligent."&lt;/p&gt;
&lt;p&gt;While computers excel at specific tasks like playing chess or recognizing patterns, they lack the general understanding and awareness that humans possess. They might be able to follow rules and algorithms flawlessly, but it’s important to understand that even the most advanced AI systems at this time, do not grasp the purpose behind their actions.&lt;/p&gt;
&lt;h2&gt;Artificial Intelligence is Born&lt;/h2&gt;
&lt;p&gt;In 1955, the legendary computer scientist John McCarthy coined the term "artificial intelligence" to secure funding for the very first AI workshop. This event, held in 1956, aimed to explore whether computers could exhibit behaviors humans would consider intelligent.&lt;/p&gt;
&lt;p&gt;Despite the limited computational power of the era, this workshop launched the field well beyond academics. The term “artificial intelligence” captured imaginations and inspired generations of scientists, writers, and technologists. Without McCarthy’s vision and knack for branding, it’s possible AI might have languished as an academic curiosity.&lt;/p&gt;
&lt;h2&gt;Early AI: Rules and Symbols&lt;/h2&gt;
&lt;p&gt;Early AI research was dominated by &lt;strong&gt;symbolic reasoning&lt;/strong&gt;. Scientists like Allen Newell and Herbert Simon developed the "General Problem Solver," a program designed to solve problems expressed mathematically. Their work was rooted in the "Physical Symbol System Hypothesis," asserting that intelligence could emerge from linking symbolic representations.&lt;/p&gt;
&lt;p&gt;This led to “expert systems” that could perform tasks like medical diagnosis or financial analysis by following pre-defined steps. However, they were limited by the sheer number of rules required to handle complex scenarios. A problem that became known as “combinatorial explosion.”&lt;/p&gt;
&lt;h2&gt;From Symbols to Machine Learning&lt;/h2&gt;
&lt;p&gt;By the late 1980s, researchers realized symbolic reasoning had limits, especially in environments requiring adaptability. Enter &lt;strong&gt;machine learning (ML)&lt;/strong&gt;, a paradigm shift that allowed computers to learn patterns from data rather than relying on predefined rules. This marked a turning point, where machines transitioned from rigid problem-solving to flexible learning.&lt;/p&gt;
&lt;p&gt;One of the earliest successes in ML came in 1959 when Arthur Samuel developed a checkers-playing program that improved by playing against itself. This demonstrated that machines could "teach" themselves strategies, opening doors to more advanced applications. Samuel’s program was a landmark, showing that AI could evolve beyond predefined knowledge to adapt and improve autonomously.&lt;/p&gt;
&lt;h2&gt;Neural Networks and Deep Learning&lt;/h2&gt;
&lt;p&gt;In the late 1980s, Geoff Hinton and others revitalized interest in &lt;strong&gt;artificial neural networks&lt;/strong&gt;, an approach inspired by the human brain. These networks, organized in layers, excelled at identifying patterns in data. By the 1990s, advancements in &lt;strong&gt;deep learning&lt;/strong&gt; introduced architectures with even more layers, enabling AI to tackle more complex tasks, from image recognition to natural language processing.&lt;/p&gt;
&lt;p&gt;Deep learning’s power lies in its ability to process massive datasets, identifying patterns beyond human perception. For instance, Google’s DeepMind famously defeated the world champion of Go, a game far more complex than chess, by leveraging deep learning to analyze millions of potential moves. This victory highlighted how AI could master tasks previously thought too intricate for machines, reshaping industries like gaming, healthcare, and logistics.&lt;/p&gt;
&lt;p&gt;Deep learning also benefited from advancements in hardware, particularly GPUs, which greatly accelerated computation. Coupled with the explosion of available data on the internet, neural networks have become a dominant force in AI research and applications.&lt;/p&gt;
&lt;h2&gt;Big Data Fuels AI’s Growth&lt;/h2&gt;
&lt;p&gt;The rapid progress of AI over the last two decades owes much to the explosion of Big Data and the rise of data science. Massive datasets, generated from social media, sensors, e-commerce, and more, provide the raw material needed for AI systems to learn and improve. These datasets allow machine learning models to uncover patterns and make predictions with unprecedented accuracy.&lt;/p&gt;
&lt;p&gt;However, managing Big Data poses its own challenges. Collecting, storing, and processing such enormous datasets require robust infrastructure and advanced tools. Organizations increasingly use cloud platforms and distributed computing frameworks to handle the scale and complexity of Big Data effectively.&lt;/p&gt;
&lt;h2&gt;The Role of Data Science&lt;/h2&gt;
&lt;p&gt;Data science bridges the gap between raw data and actionable insights. Combining statistics, computer science, and domain expertise, data scientists analyze and preprocess data to make it usable for AI applications. They clean datasets, identify trends, and engineer features that enhance the performance of machine learning models.&lt;/p&gt;
&lt;p&gt;Data science also plays a crucial role in interpreting the results of AI models. For example, while an AI system might identify a correlation between specific behaviors and purchasing decisions, it’s often up to data scientists to contextualize these findings and derive meaningful business strategies.&lt;/p&gt;
&lt;p&gt;Together, Big Data and data science have &lt;strong&gt;enabled AI to move from theoretical possibilities to practical applications&lt;/strong&gt; that impact daily life.&lt;/p&gt;
&lt;h2&gt;Generative AI: Machines That Create&lt;/h2&gt;
&lt;p&gt;While traditional AI focuses on analyzing data, generative AI takes it a step further by creating new content. Systems like &lt;strong&gt;large language models (LLMs)&lt;/strong&gt; and &lt;strong&gt;generative adversarial networks (GANs)&lt;/strong&gt; can produce text, code, images, music, and even video. These advancements hinge on foundational models – massive networks trained on diverse datasets – and techniques like self-supervised learning, which labels data autonomously.&lt;/p&gt;
&lt;p&gt;Generative AI represents a significant leap forward, blurring the lines between human creativity and machine capability. Applications like OpenAI’s GPT and DALL•E have demonstrated AI’s ability to write stories, generate artwork, and even assist in scientific discovery. However, it also raises &lt;a href="/posts/2024/Dec/11/responsible-ai-ethical-principles-for-humanity/"&gt;ethical questions&lt;/a&gt; about authenticity, bias, and the role of humans in creative industries.&lt;/p&gt;
&lt;p&gt;This technology’s potential is immense but must be approached cautiously. For instance, deepfake technology, a byproduct of generative AI, has sparked concerns about misinformation and privacy. Policymakers, technologists, and ethicists are now grappling with how to ensure these tools are used responsibly.&lt;/p&gt;
&lt;h2&gt;Lessons from AI’s History&lt;/h2&gt;
&lt;p&gt;The evolution of AI underscores the importance of adapting to new challenges and opportunities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Early Days:&lt;/strong&gt; Symbolic reasoning laid the groundwork but struggled with real-world complexity. These early systems were limited to structured environments like games and predefined problem sets.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning:&lt;/strong&gt; Enabled AI to learn from data, bypassing the rigidity of rule-based systems. This adaptability marked a significant shift, allowing AI to tackle broader applications.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deep Learning:&lt;/strong&gt; Leveraged massive datasets to tackle tasks once thought impossible for machines. Advances in hardware and data accessibility have supercharged this field, enabling breakthroughs in fields ranging from medicine to entertainment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;As AI continues to evolve, its history offers a valuable perspective on innovation. By appreciating the breakthroughs and setbacks of the past, we can better navigate the ethical and practical challenges of tomorrow. Whether it’s a chess game or a generative AI model writing poetry, the story of AI is, at its core, a reflection of humanity’s drive to understand and innovate.&lt;/p&gt;
&lt;p&gt;Moreover, this journey reminds us that AI’s success has always depended on human vision and creativity. As we look ahead, it’s not just about building smarter machines but about ensuring they serve humanity’s best interests, fostering collaboration, and unlocking new frontiers of possibility.&lt;/p&gt;
&lt;h2&gt;Additional References and Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Artificial_intelligence"&gt;Wikipedia article on artificial intelligence&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://plato.stanford.edu/entries/artificial-intelligence/"&gt;Stanford Encyclopedia of Philosophy article on intelligence&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dartmouth_Summer_Research_Project_on_Artificial_Intelligence"&gt;Dartmouth Summer Research Project on Artificial Intelligence&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"&gt;John McCarthy&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/General_Problem_Solver"&gt;General Problem Solver&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://ai.stanford.edu/~nilsson/OnlinePubs-Nils/PublishedPapers/pssh.pdf"&gt;Physical Symbol System Hypothesis&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Expert_system"&gt;Expert systems&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arthur_Samuel_(computer_scientist)"&gt;Arthur Samuel&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Artificial_neural_network"&gt;Artificial neural network&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Deep_learning"&gt;Deep learning&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Geoffrey_Hinton"&gt;Geoffrey Hinton&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Generative_adversarial_network"&gt;Generative Adversarial Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="AI Fundamentals"></category><category term="symbolic reasoning"></category><category term="machine learning"></category><category term="neural networks"></category><category term="deep learning"></category><category term="generative ai"></category></entry><entry><title>Responsible AI: Ethical Principles for Humanity</title><link href="https://www.benjaminpatch.com/posts/2024/Dec/11/responsible-ai-ethical-principles-for-humanity/" rel="alternate"></link><published>2024-12-11T10:07:00-08:00</published><updated>2025-02-04T23:50:00-08:00</updated><author><name>Benjamin Patch</name></author><id>tag:www.benjaminpatch.com,2024-12-11:/posts/2024/Dec/11/responsible-ai-ethical-principles-for-humanity/</id><summary type="html">&lt;p&gt;In this brief but eye-opening exploration of responsible AI, you'll discover the critical ethical challenges facing our technological future. More than a cautionary tale, this article offers a roadmap for developing AI that amplifies human potential while safeguarding our fundamental values.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this brief but eye-opening exploration of responsible AI, you'll discover the critical ethical challenges facing our technological future. More than a cautionary tale, this article offers a roadmap for developing AI that amplifies human potential while safeguarding our fundamental values.&lt;/p&gt;
&lt;p&gt;Whether you're a technologist, business leader, or simply someone curious about the profound impact of AI, you'll gain insights into how we can harness this revolutionary technology with wisdom, fairness, and foresight.&lt;/p&gt;
&lt;h2&gt;The Imperative of Responsible AI&lt;/h2&gt;
&lt;p&gt;Artificial intelligence (AI) accelerated by machine learning (ML) is transforming our world at breathtaking speed, promising breakthroughs in medicine, science, and industry. While I am inspired by the current and near-future potential of AI technology, I am also deeply concerned about the speed and direction we are traveling.&lt;/p&gt;
&lt;p&gt;The promise of artificial intelligence is staggering – imagine systems that can diagnose diseases earlier than human physicians, optimize complex global supply chains, or solve intricate scientific challenges that have long eluded human comprehension. Yet, this extraordinary potential comes with equally profound responsibilities.&lt;/p&gt;
&lt;p&gt;Science fiction is filled with warnings of how unchecked technological development can lead to unintended consequences – and AI powered by machine learning is no longer confined to the safety of science fiction. Machine learning has become a powerful lens that can either amplify our collective human potential or exacerbate existing societal inequities. Responsible AI development is our critical checkpoint – ensuring that technological advancement serves humanity's broader interests.&lt;/p&gt;
&lt;h2&gt;Real-World Stakes of Algorithmic Bias&lt;/h2&gt;
&lt;p&gt;The algorithmic bias of machine learning is not a theoretical problem – it’s a present-day reality with tangible human consequences. Here are a few real-world examples I found in my research:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Amazon’s recruiting algorithm&lt;/strong&gt; (now scrapped) was proven to discriminate against female applicants (source: &lt;a href="https://www.reuters.com/article/world/insight-amazon-scraps-secret-ai-recruiting-tool-that-showed-bias-against-women-idUSKCN1MK0AG/"&gt;Reuters&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChatGPT-4&lt;/strong&gt; recommends fewer MRIs and stress tests for Black patients and female cardiology patients without sound medical reasoning (source: &lt;a href="https://www.cbsnews.com/sanfrancisco/news/ai-chatbots-are-supposed-to-improve-health-care-but-research-says-some-are-perpetuating-racism-2/"&gt;CBS News&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Credit scoring ML algorithms&lt;/strong&gt; routinely discriminate based on non-financial attributes like race and sex (source: &lt;a href="https://link.springer.com/article/10.1007/s00146-023-01676-3"&gt;Springer Nature&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Among dozens of other examples cited by &lt;a href="https://www.brookings.edu/articles/algorithmic-bias-detection-and-mitigation-best-practices-and-policies-to-reduce-consumer-harms/"&gt;The Brookings Institution&lt;/a&gt; and many other credible research groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The evidence is clear and deeply troubling. Machine learning systems have already inadvertently perpetuated discriminatory practices across many aspects of modern society. Hence, our imperative need for more ethically responsible AI development.&lt;/p&gt;
&lt;h2&gt;Workforce Disruption and Economic Recalibration&lt;/h2&gt;
&lt;p&gt;Machine learning will continue to fundamentally reshape our economic landscape. Not just by incremental changes but a potential restructuring of entire industries. Automation driven by AI could displace millions of jobs, particularly in sectors like manufacturing, transportation, customer service, and administrative work. Generative AI threatens creative fields such as writing, graphic design, video editing, and yes, even entry-level software developers – virtually all knowledge-based work could be at risk. Each worker can be empowered to do so much more, but fewer workers might be needed overall.&lt;/p&gt;
&lt;p&gt;However, this isn't simply a narrative of job loss. We're also witnessing the emergence of entirely new job categories that didn't exist a few years ago, such as AI prompt engineering. Therefore, I strongly believe the key is &lt;strong&gt;proactive adaptation&lt;/strong&gt; – investing in reskilling programs, creating educational frameworks that prepare workers for an AI-integrated workforce, and developing policies that ensure economic transitions are equitable and supportive. If political leaders fail to deliver such adaptive programs and policies, it will likely lead to economic blowback not seen in generations.&lt;/p&gt;
&lt;h2&gt;Core Principles of Responsible AI&lt;/h2&gt;
&lt;p&gt;To protect against the many potential harms of AI, &lt;a href="https://www.atlassian.com/blog/artificial-intelligence/responsible-ai"&gt;Atlassian&lt;/a&gt; and many other industry leaders advocate that four key principles must guide every project claiming to operate under the banner of ethically responsible AI:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Transparency:&lt;/strong&gt; AI must be explainable. Stakeholders should understand how decisions are made, and developers should document and share the inner workings of their systems. A lack of transparency can lead to mistrust and misuse.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fairness:&lt;/strong&gt; Bias in AI systems is one of the biggest ethical challenges. Developers need to carefully evaluate training datasets and outcomes to ensure algorithms don’t disproportionately harm or exclude certain groups. Regular audits can help identify and address potential issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy and Security:&lt;/strong&gt; As AI often relies on vast amounts of sensitive data, privacy and security should be top priorities. Encryption, anonymization, and secure coding practices are essential for safeguarding user information and preventing breaches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accountability:&lt;/strong&gt; Every AI decision should have a human touchpoint. When errors occur, there should be a clear chain of accountability to rectify problems quickly and learn from mistakes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Key Considerations for Project Stakeholders&lt;/h2&gt;
&lt;p&gt;Stakeholders have a unique responsibility to champion ethically responsible AI initiatives. Here’s how I suggest they contribute:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Promote human oversight:&lt;/strong&gt; Ensure there are checks and balances in place, especially for high-stakes decisions like loan approvals or medical diagnoses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assess societal impact:&lt;/strong&gt; Go beyond profit to consider how your AI solutions affect communities.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Champion diversity:&lt;/strong&gt; Building diverse teams helps mitigate bias and ensures your AI reflects a broader range of perspectives.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Best Practices for Developers&lt;/h2&gt;
&lt;p&gt;For software developers, responsible AI starts with adopting tools and frameworks designed to uphold ethical standards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Follow ethical AI guidelines:&lt;/strong&gt; Frameworks from companies like &lt;a href="https://www.microsoft.com/en-us/ai/responsible-ai"&gt;Microsoft&lt;/a&gt; and &lt;a href="https://ai.google/responsibility/principles/"&gt;Google&lt;/a&gt; can serve as roadmaps for creating trustworthy systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use bias detection tools:&lt;/strong&gt; Open-source resources like &lt;a href="https://aif360.res.ibm.com/"&gt;IBM’s AI Fairness 360&lt;/a&gt; toolkit can help developers identify and reduce bias in datasets and models.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test and document rigorously:&lt;/strong&gt; Regular testing and thorough documentation are vital for ensuring transparency, fairness, and accountability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Responsible AI in Action&lt;/h2&gt;
&lt;p&gt;Here are two quick examples of how ethically responsible AI development can be put into practice:&lt;/p&gt;
&lt;h3&gt;Case Study 1: Reducing Bias in Hiring&lt;/h3&gt;
&lt;p&gt;A tech company used an AI tool for candidate screening but discovered it favored male applicants due to historical bias in the data. By retraining the model on a more diverse dataset and introducing oversight checks, the company created a fairer hiring process.&lt;/p&gt;
&lt;h3&gt;Case Study 2: Transparent Diagnostics in Healthcare&lt;/h3&gt;
&lt;p&gt;A healthcare provider implemented an AI diagnostic tool with clear explanations for its decisions. Doctors could review the system’s recommendations, enhancing trust and enabling better patient care.&lt;/p&gt;
&lt;h2&gt;A Personal Call to Action&lt;/h2&gt;
&lt;p&gt;To my fellow technologists, policymakers, and innovators: we stand at a critical juncture. The AI and machine learning systems we develop today will shape human experiences for generations. Our choices matter – profoundly and irrevocably.&lt;/p&gt;
&lt;p&gt;Responsible AI is not about constraining innovation but channeling it toward meaningful, equitable outcomes. We must approach this technology with humility, foresight, and an unwavering commitment to human dignity.&lt;/p&gt;
&lt;p&gt;The future of artificial intelligence is not predetermined. It will be shaped by our collective choices, our ethical frameworks, and our willingness to prioritize human well-being over technological expediency.&lt;/p&gt;
&lt;p&gt;My personal commitment to ethically responsible AI development will remain a strong guiding principle as I develop real-world applications and training materials alike. I strongly encourage you to do the same and draw attention to oversights you might be exposed to. Our future can be extraordinarily bright so long as we develop AI responsibly today.&lt;/p&gt;
&lt;p&gt;What are your thoughts on responsible AI development? Please share your thoughts with me on Bluesky &lt;a href="https://bsky.app/profile/benjaminpatch.com"&gt;@benjaminpatch.com&lt;/a&gt;. Thanks for reading and please code responsibly.&lt;/p&gt;
&lt;h2&gt;Additional References and Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/azure/machine-learning/concept-responsible-ai?view=azureml-api-2"&gt;What is Responsible AI - Azure Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.iso.org/artificial-intelligence/responsible-ai-ethics"&gt;Building a responsible AI: How to manage the AI ethics debate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/blog/artificial-intelligence/responsible-ai"&gt;Responsible AI: Key Principles and Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/think/topics/data-bias"&gt;What is Data Bias?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="AI Ethos"></category><category term="best practices"></category><category term="algorithmic bias"></category><category term="machine learning"></category><category term="generative ai"></category></entry></feed>