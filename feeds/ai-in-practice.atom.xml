<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Benjamin Patch - AI in Practice</title><link href="https://www.benjaminpatch.com/" rel="alternate"></link><link href="https://www.benjaminpatch.com/feeds/ai-in-practice.atom.xml" rel="self"></link><id>https://www.benjaminpatch.com/</id><updated>2025-05-13T00:17:00-07:00</updated><subtitle>Guides for Building Ethical &amp; Impactful AI Software</subtitle><entry><title>When Vibe Coding Fails: Python Kickstart (part 1)</title><link href="https://www.benjaminpatch.com/posts/2025/May/13/when-vibe-coding-fails-python-kickstart-p1/" rel="alternate"></link><published>2025-05-13T00:17:00-07:00</published><updated>2025-05-13T00:17:00-07:00</updated><author><name>Benjamin Patch</name></author><id>tag:www.benjaminpatch.com,2025-05-13:/posts/2025/May/13/when-vibe-coding-fails-python-kickstart-p1/</id><summary type="html">&lt;p&gt;Welcome to part one of my Python Kickstart series! Let's discuss why you should still learn Python in the age of vibe coding. Then we'll get our feet wet by learning about running Python code. An introduction to variables, the print function, basic errors, and code comments. Let's get started!&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Why Learn Python?&lt;/h2&gt;
&lt;p&gt;From web development to data science to machine learning applications, Python has become one of today's most in-demand programming languages. Being skilled with it opens countless possibilities for your career. Its clean syntax and logical structure make it easy to learn and even fun to use!&lt;/p&gt;
&lt;p&gt;Python's massive number of powerful modules, packages, and frameworks extend the language into virtually any domain of interest. Not to mention this is all fully open-source, making it free to use, modify, and redistribute - including for commercial purposes.&lt;/p&gt;
&lt;h2&gt;Why Isn't Vibe Coding the Answer?&lt;/h2&gt;
&lt;p&gt;Now, you may have heard some AI startup CEOs proclaim it is essentially a “waste of time to learn how to code in 2025.”&lt;sup&gt;&lt;a href="#works-cited"&gt;1&lt;/a&gt;&lt;/sup&gt; I strongly disagree with these comments for several reasons. To start, I have first-hand experience asking LLMs (Large Language Models) to write and/or edit various types of code on my behalf. And while their speed and general capabilities can be astonishing, like people, they still make mistakes. And these mistakes can lead to broken and/or highly unmaintainable codebases.&lt;/p&gt;
&lt;p&gt;To catch and correct mistakes from LLM-generated code (AKA vibe coding), you need to understand the fundamentals of the programming languages, modules, packages, and frameworks your application requires. Otherwise, it’s like asking an LLM a general question in English and receiving a response in Japanese. If you have no understanding of Japanese, you will be hard-pressed to refine any output it produces.&lt;/p&gt;
&lt;p&gt;Plus, let's not forget those AI startup CEOs have a vested interest in you being totally reliant on their products. Knowledge is power. Please don't outsource your critical thinking skills to AI. It's a tool, not a replacement for your brain.&lt;/p&gt;
&lt;h2&gt;Is There a Place for AI in Coding?&lt;/h2&gt;
&lt;p&gt;Even with that being said, there absolutely is a place for AI-assisted coding. Once you understand the basics, AI tools can supercharge your productivity - even acting as a paired-programming partner. The key is understanding what these LLMs excel at, and when you need to take the lead.&lt;/p&gt;
&lt;p&gt;The first step in getting to that point is understanding the fundamentals of Python - or any programming language for that matter. As I recently read, "Vibe coding is fun, but &lt;strong&gt;vibe refactoring&lt;/strong&gt; pays the bills."&lt;sup&gt;&lt;a href="#works-cited"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;With that in mind, let’s kickstart our knowledge of Python programming!&lt;/p&gt;
&lt;h2&gt;Install Python 3&lt;/h2&gt;
&lt;p&gt;If you don’t already have a Python development environment set up, there are several ways you can do this. The method I recommend is creating a virtual environment using &lt;code&gt;pyenv&lt;/code&gt;. If you’re not familiar with installing Python via &lt;code&gt;pyenv&lt;/code&gt;, please reference &lt;a href="https://www.benjaminpatch.com/posts/2025/Jan/30/simple-python-virtual-environments-linux-mac/"&gt;Simple Python Virtual Environments: Linux and Mac&lt;/a&gt; where I explain the benefits of this approach and walk you through the necessary steps to get rolling.&lt;/p&gt;
&lt;p&gt;As noted in the linked article above, Windows users should use &lt;a href="https://github.com/pyenv-win/pyenv-win"&gt;pyenv-win&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;Because this &lt;strong&gt;Python Kickstart&lt;/strong&gt; series of articles is an introduction to the basic principles and syntax of the language, any currently supported version of Python 3 is sufficient to install. Support for all versions of Python 2 were sunset in January 2020&lt;sup&gt;&lt;a href="#works-cited"&gt;3&lt;/a&gt;&lt;/sup&gt;, and it is quite different. So please use Python 3.&lt;/p&gt;
&lt;p&gt;I generally recommend choosing the most current stable release (&lt;code&gt;3.13&lt;/code&gt; as of this writing) unless your project specifically requires something older.&lt;/p&gt;
&lt;p&gt;With Python 3 installed and running on your system, let’s get started with this incredible programming language!&lt;/p&gt;
&lt;h2&gt;Run Python Code in Your Terminal&lt;/h2&gt;
&lt;p&gt;There are many ways to execute (or run) Python code, but for the purposes of learning the basics, I recommend using a combination of your system's terminal and a code editor. Let's start with your terminal, then we'll bring a code editor into the mix.&lt;/p&gt;
&lt;p&gt;To run Python code in your terminal, simply type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Linux and Mac:&lt;/span&gt;
python3&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# or just &amp;#39;python&amp;#39; if pyenv was used to install Python&lt;/span&gt;

&lt;span class="c1"&gt;# or on Windows:&lt;/span&gt;
py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Press &lt;code&gt;enter&lt;/code&gt; and the Python interpreter will open. It will look something like this (colors will vary based on your shell configuration):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plus&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Python code goes here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From here, you can run any Python code. To exit the interpreter, type &lt;code&gt;ctrl-d&lt;/code&gt; on Linux/Mac or &lt;code&gt;ctrl-z&lt;/code&gt; on Windows, followed by &lt;code&gt;enter&lt;/code&gt;. If that doesn’t work, you can also exit by typing: &lt;code&gt;quit()&lt;/code&gt; or &lt;code&gt;exit&lt;/code&gt;, followed by &lt;code&gt;enter&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Python!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the example above, &lt;code&gt;greeting&lt;/code&gt; is the variable, and it is set to the &lt;code&gt;string&lt;/code&gt; (a sequence of characters inside quotes) &lt;code&gt;Hello, Python!&lt;/code&gt; The equals sign (&lt;code&gt;=&lt;/code&gt;) is called an &lt;strong&gt;assignment operator&lt;/strong&gt;. A few rules to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variables cannot start with a number. So &lt;code&gt;x1&lt;/code&gt; is a valid variable, but &lt;code&gt;1x&lt;/code&gt; is not valid and will throw a syntax error.&lt;/li&gt;
&lt;li&gt;Variables also cannot contain spaces or special characters other than an underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Traditionally, variables start with lowercase letters so they are not confused with a &lt;code&gt;class&lt;/code&gt;. More on classes later in this series.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Python, variables can be assigned to just about anything the language supports - as we will see moving forward.&lt;/p&gt;
&lt;h2&gt;Python's print() Function&lt;/h2&gt;
&lt;p&gt;If we open the Python interpreter in our terminal (&lt;code&gt;python3&lt;/code&gt; on Linux/Mac or &lt;code&gt;py&lt;/code&gt; on Windows), and enter the following two lines of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Python!&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Hello, Python!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;print()&lt;/code&gt; function is built into Python and displays the specified message on screen. Anything inside the &lt;code&gt;()&lt;/code&gt; becomes the output. We’ll be using the &lt;code&gt;print()&lt;/code&gt; function extensively so you gain a better understanding of what the code is doing.&lt;/p&gt;
&lt;h2&gt;Jump into a Code Editor&lt;/h2&gt;
&lt;p&gt;Writing and running code in the Python interpreter is fine for simple checks, but anything longer than a few lines should be written to a &lt;code&gt;.py&lt;/code&gt; (Python) file with your preferred code editor.&lt;/p&gt;
&lt;p&gt;If you don’t yet have a preferred code editor, I recommend starting with &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;. It’s free, has excellent Python support (with a few free extensions), and runs well on Linux, Mac, and Windows.&lt;/p&gt;
&lt;p&gt;If you would like to follow along with the following code examples, feel free to create a &lt;code&gt;.py&lt;/code&gt; file in your code editor. As long as it ends with &lt;code&gt;.py&lt;/code&gt;, it can be called almost anything you would like, I’ll go with &lt;code&gt;python_kickstart.py&lt;/code&gt;. Like variables, spaces and special characters (other than underscores) are not allowed. Your filename also cannot start with a number.&lt;/p&gt;
&lt;p&gt;Now in our &lt;code&gt;.py&lt;/code&gt; file, write the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save your &lt;code&gt;python_kickstart.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Next, go back to your terminal and, if it is still running, exit the Python interpreter (&lt;code&gt;ctrl-d&lt;/code&gt; on Linux/Mac or &lt;code&gt;ctrl-z&lt;/code&gt; on Windows).&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;cd&lt;/code&gt; (change directory) into the location where &lt;code&gt;python_kickstart.py&lt;/code&gt; lives. And run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Linux and Mac:&lt;/span&gt;
python3&lt;span class="w"&gt; &lt;/span&gt;python_kickstart.py

&lt;span class="c1"&gt;# or on Windows:&lt;/span&gt;
py&lt;span class="w"&gt; &lt;/span&gt;python_kickstart.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And your terminal will return:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great job! You just asked Python to run the code in &lt;code&gt;python_kickstart.py&lt;/code&gt; and return the results. In this case, Python didn't simply print &lt;code&gt;4 + 3&lt;/code&gt; but it did the arithmetic and only printed the result.&lt;/p&gt;
&lt;p&gt;Going forward, I encourage you to manually write out (refrain from copy and paste) and execute the code examples for the topics we'll be covering. Then create a few more samples following the same patterns but with different content. I find this to be the most effective way to retain, understand, and eventually apply these foundational Python programming concepts.&lt;/p&gt;
&lt;h2&gt;Python Errors&lt;/h2&gt;
&lt;p&gt;We all make mistakes. And when mistakes happen within your code, Python might throw an error message. This is nothing to be afraid of because Python error messages routinely provide helpful information - guiding you to narrow down the problem. For example, Python will point to the location where an error occurred with one or more &lt;code&gt;^&lt;/code&gt; characters like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python_error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Let&amp;#39;s see if this works.&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python_error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.../python_kickstart.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python_error&lt;/span&gt;
         &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is called a &lt;code&gt;SyntaxError&lt;/code&gt;, which means there is something wrong with the way our program is written — punctuation that does not belong, a command where it is not expected, or a missing parenthesis (as seen above) can all trigger a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Between the specific line number being noted, the &lt;code&gt;^&lt;/code&gt; pointing, and the and the message, this makes it very clear what we did wrong. Thanks, Python!&lt;/p&gt;
&lt;p&gt;Another common error type is called a &lt;code&gt;NameError&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With no further context, this Python code will output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.../python_kickstart.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best_movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;^^^^^^^^^^&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;best_movie&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;NameError&lt;/code&gt; occurs when the Python interpreter sees a word it does not recognize. Code that contains something that looks like a variable but was never defined (as seen above) will throw such an error.&lt;/p&gt;
&lt;p&gt;Again, this detailed feedback makes simple debugging much easier than the code simply failing and maybe outputting some cryptic message. Good programmers read and try to decipher error messages. Python tries to help where it can - going well beyond many other programming languages in this regard.&lt;/p&gt;
&lt;h2&gt;Python Comments&lt;/h2&gt;
&lt;p&gt;You may have already noticed the use of &lt;code&gt;#&lt;/code&gt;. In Python, &lt;code&gt;#&lt;/code&gt; indicates anything that follows on the same line, is a comment. Python ignores all comments when running code, so they do not affect the output.&lt;/p&gt;
&lt;p&gt;Comments can be thought of as notes for people. In fact, many programmers use comments as a form of documentation. Stating the intended purpose of a function, for example, can help other developers (or your future self) follow the logic of the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a single-line comment&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;This is a multi-line comment&lt;/span&gt;

&lt;span class="sd"&gt;Anything inside the triple quotes is also ignored by the Python interpreter &lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A set of three single quotes also works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Multi-line comments can also be surrounded by a set of three single quotes&lt;/span&gt;

&lt;span class="sd"&gt;The end result is the same as using a set of three double quotes&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comments are a great way of explaining existing code or to outline future plans. Code comments are incredibly helpful and I encourage you to use them.&lt;/p&gt;
&lt;p&gt;In fact, if you ever need to ask an AI model to generate code for you (in the future, only after you learn the basics), direct it to document the output with code comments. This way, even when the code is broken, you'll have a better idea what the AI was trying to do. Then you can use your Python skills to refactor and fix it!&lt;/p&gt;
&lt;h2&gt;Basic Python Data Types&lt;/h2&gt;
&lt;p&gt;In Python, there are three basic data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Booleans&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coming up in this &lt;strong&gt;Python Kickstart&lt;/strong&gt; series, we'll be diving into basic data types and structures. To ensure you don't miss it, please subscribe to &lt;a href="https://www.benjaminpatch.com/feeds/all.atom.xml"&gt;this blog's RSS feed&lt;/a&gt; and follow me on Bluesky: &lt;a href="https://bsky.app/profile/benjaminpatch.com"&gt;@benjaminpatch.com&lt;/a&gt;. Thanks for your interest in learning Python, and I'll catch you next time!&lt;/p&gt;
&lt;p&gt;&lt;a id="works-cited"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Works Cited&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ndtv.com/feature/replit-ceo-explains-why-learning-to-code-is-pointless-in-ai-era-instead-learn-how-to-8039962"&gt;Replit CEO Explains Why Learning To Code Is Pointless In AI Era&lt;/a&gt; - NDTV, accessed May 12, 2025.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dawidmakowski.com/en/2025/04/vibe-coding-is-fun-but-vibe-refactoring-pays-the-bills/"&gt;Vibe Coding Is Fun - But Vibe Refactoring Pays the Bills&lt;/a&gt; - Dawid Makowski, accessed May 12, 2025.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/doc/sunset-python-2/"&gt;Sunsetting Python 2&lt;/a&gt; - python.org, accessed May 12, 2025.&lt;/li&gt;
&lt;/ol&gt;</content><category term="AI in Practice"></category><category term="python"></category><category term="python kickstart"></category><category term="virtual environments"></category><category term="best practices"></category><category term="vibe coding"></category><category term="open-source"></category><category term="generative ai"></category></entry><entry><title>Simple Python Virtual Environments: Linux and Mac</title><link href="https://www.benjaminpatch.com/posts/2025/Jan/30/simple-python-virtual-environments-linux-mac/" rel="alternate"></link><published>2025-01-30T17:32:00-08:00</published><updated>2025-03-03T16:58:00-08:00</updated><author><name>Benjamin Patch</name></author><id>tag:www.benjaminpatch.com,2025-01-30:/posts/2025/Jan/30/simple-python-virtual-environments-linux-mac/</id><summary type="html">&lt;p&gt;Python is the most widely used programming language for projects involving artificial intelligence and machine learning. But regardless of what you use Python for, virtual environments are critical to essentially all development workflows. In this guide, you will learn why virtual environments are important and how to create and manage them.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is the most widely used programming language for projects involving artificial intelligence and machine learning. But regardless of what you use Python for, virtual environments are critical to essentially all development workflows. In this guide, you will learn why virtual environments are important and how to create and manage them.&lt;/p&gt;
&lt;p&gt;Specifically, we will cover the installation, configuration, and basic use of &lt;code&gt;pyenv&lt;/code&gt; to manage numerous versions of Python on your system. We will also explain how to use &lt;code&gt;venv&lt;/code&gt; to create, activate, deactivate, and remove virtual Python environments. Finally, we will cover the management of external dependencies with &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The combination of these three tools will help us create simple, clean, and flexible virtual environments for a wide range of Python projects. Let’s walk through the process together.&lt;/p&gt;
&lt;h2&gt;Why Virtual Environments?&lt;/h2&gt;
&lt;p&gt;It is best practice to create virtual environments to isolate project dependencies from the global Python installation and other projects. Imagine a situation where you are working on one project that is targeting the most recent version of Python and external packages. But you also inherited another project from other developers who wrote the code years ago for a much older version of Python and external packages.&lt;/p&gt;
&lt;p&gt;By isolating the development environments for each of these projects, you can prevent conflicts between them and ensure each project runs with the specific version of Python and external packages it requires. Plus, you can quickly swap out versions of Python and dependencies to see if it leads to any problems.&lt;/p&gt;
&lt;p&gt;Perhaps that old project only needs a few minor tweaks to run in modern environments. Maybe it will become more performant and secure with the upgrade. Virtual development environments can help you find out.&lt;/p&gt;
&lt;h2&gt;A Note for My Windows Friends&lt;/h2&gt;
&lt;p&gt;This guide is written for setting up virtual environments on Linux and macOS because that is where I spend most of my time. While some of these tools will work on Windows, it is not recommended. As noted in the documentation for the first tool we will be discussing, &lt;code&gt;pyenv&lt;/code&gt;:&lt;/p&gt;
&lt;style&gt;
blockquote {
    overflow: hidden;
    padding: 0 0 0 26px;
    position: relative;
}
blockquote:before {
    content: "";
    border-left: 6px solid #0d6efd;
    position: absolute;
    bottom: 8px;
    top: 0px;
    left: 0;
}
&lt;/style&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; does not officially support Windows and does not work in Windows outside the Windows Subsystem for Linux. Moreover, even there, the Pythons it installs are not native Windows versions but rather Linux versions running in a virtual machine -- so you won't get Windows-specific functionality.&lt;/p&gt;
&lt;p&gt;If you're in Windows, we recommend using @kirankotari's &lt;a href="https://github.com/pyenv-win/pyenv-win"&gt;pyenv-win&lt;/a&gt; fork -- which does install native Windows Python versions.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After &lt;code&gt;pyenv-win&lt;/code&gt; is installed and running Python on your Windows machine, you should be able to join us later in this guide in the &lt;a href="#use-venv-to-create-virtual-environments"&gt;Use venv to Create Virtual Environments&lt;/a&gt; section since everything after that is done within Python itself.&lt;/p&gt;
&lt;p&gt;Just keep in mind the syntax differences between running Python commands on Windows as compared to Linux and macOS. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;--version&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# run Python commands on Linux and macOS&lt;/span&gt;
py&lt;span class="w"&gt; &lt;/span&gt;--version&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# run the same Python command on Windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Install pyenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; is the gold standard for managing multiple Python versions on your system. It allows you to easily install and switch between different Python interpreters globally or on a per-project level. It is simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well. Let's start by getting &lt;code&gt;pyenv&lt;/code&gt; installed.&lt;/p&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;On your Linux distro of choice, run the following terminal command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-fsSL&lt;span class="w"&gt; &lt;/span&gt;https://pyenv.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;macOS&lt;/h3&gt;
&lt;p&gt;On macOS, the Linux command above should work but using the Homebrew package manager is recommended by the developers of &lt;code&gt;pyenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don't already have Homebrew running on your Mac, then please follow the installation instructions from &lt;a href="https://brew.sh/"&gt;Homebrew's documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With Homebrew installed on your Mac, run the following terminal commands to update Homebrew itself and install &lt;code&gt;pyenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;As noted above, this guide is written for Linux and macOS. Windows users are encouraged to use &lt;a href="https://github.com/pyenv-win/pyenv-win"&gt;pyenv-win&lt;/a&gt; instead. Detailed installation and usage instructions can be found in that project's documentation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Shell Configurations&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;pyenv&lt;/code&gt; installed, it now needs to be configured for your terminal’s shell. This guide covers the three most common shells: Bash, Zsh, and Fish. If you are not sure which shell your system is using, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it will tell you. Then follow the steps outlined in the appropriate section below.&lt;/p&gt;
&lt;p&gt;To learn more about shells, please see this informative article from TheLinuxCode: &lt;a href="https://thelinuxcode.com/linux-shells-for-beginners-bash-zsh-and-fish-explained-and-compared/"&gt;Linux Shells for Beginners – Bash, Zsh, and Fish Explained and Compared&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Bash&lt;/h3&gt;
&lt;p&gt;Bash (Bourne Again SHell) ships as the default shell on most Linux distros and older Macs.&lt;/p&gt;
&lt;p&gt;If you are not using Bash, please skip this section.&lt;/p&gt;
&lt;p&gt;Stock Bash startup files vary widely between Linux distributions. So, the most reliable way to get &lt;code&gt;pyenv&lt;/code&gt; working in all environments is to append configuration commands to both &lt;code&gt;.bashrc&lt;/code&gt; (for interactive shells) and the profile file that Bash would use (for login shells).&lt;/p&gt;
&lt;p&gt;First, add the following commands to &lt;code&gt;~/.bashrc&lt;/code&gt; by running the following in your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, if you have &lt;code&gt;~/.profile&lt;/code&gt;, &lt;code&gt;~/.bash_profile&lt;/code&gt; or &lt;code&gt;~/.bash_login&lt;/code&gt;, add the commands there as well. If you have none of these, create a &lt;code&gt;~/.profile&lt;/code&gt; and add the commands there.&lt;/p&gt;
&lt;p&gt;Run for &lt;code&gt;~/.profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run for &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - bash)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Zsh&lt;/h3&gt;
&lt;p&gt;Zsh (Z SHell) ships as the default shell on newer Macs and a few Linux distros. But if desired, virtually any Linux distro can be configured to run Zsh.&lt;/p&gt;
&lt;p&gt;If you are not using Zsh, please skip this section.&lt;/p&gt;
&lt;p&gt;For Zsh shells, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[[ -d $PYENV_ROOT/bin ]] &amp;amp;&amp;amp; export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init - zsh)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Fish&lt;/h3&gt;
&lt;p&gt;As far as I know, Fish (Friendly Interactive Shell) does not ship as the default shell on any major Linux distros or macOS. It must be installed manually.&lt;/p&gt;
&lt;p&gt;If you are not using Fish, please skip this section.&lt;/p&gt;
&lt;p&gt;If you have Fish 3.2.0 or newer, execute this interactively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ux&lt;span class="w"&gt; &lt;/span&gt;PYENV_ROOT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.pyenv
fish_add_path&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Otherwise, execute this snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Ux&lt;span class="w"&gt; &lt;/span&gt;PYENV_ROOT&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.pyenv
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-U&lt;span class="w"&gt; &lt;/span&gt;fish_user_paths&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$PYENV_ROOT&lt;/span&gt;/bin&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$fish_user_paths&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, add this to &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;fish&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h2&gt;Restart Your Shell&lt;/h2&gt;
&lt;p&gt;Regardless of which shell you are using, for the &lt;code&gt;PATH&lt;/code&gt; changes to take effect, the shell must restart:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Install Python Build Dependencies&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; will try its best to download and compile the desired Python version. Still, sometimes the compilation fails because of unmet system dependencies, or the compilation succeeds but the new Python version exhibits strange failures at runtime. The following instructions are the developer's recommendations for a sane build environment.&lt;/p&gt;
&lt;p&gt;Please only apply the following instructions for your OS and skip the others.&lt;/p&gt;
&lt;h3&gt;macOS (Homebrew)&lt;/h3&gt;
&lt;p&gt;If you haven't already done so, please install Xcode Command Line Tools (&lt;code&gt;xcode-select --install&lt;/code&gt;) and &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;. Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew&lt;span class="w"&gt; &lt;/span&gt;update
brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;readline&lt;span class="w"&gt; &lt;/span&gt;sqlite3&lt;span class="w"&gt; &lt;/span&gt;xz&lt;span class="w"&gt; &lt;/span&gt;zlib&lt;span class="w"&gt; &lt;/span&gt;tcl-tk@8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Debian / Ubuntu / Linux Mint (apt)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;build-essential&lt;span class="w"&gt; &lt;/span&gt;libssl-dev&lt;span class="w"&gt; &lt;/span&gt;zlib1g-dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
libbz2-dev&lt;span class="w"&gt; &lt;/span&gt;libreadline-dev&lt;span class="w"&gt; &lt;/span&gt;libsqlite3-dev&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
libncursesw5-dev&lt;span class="w"&gt; &lt;/span&gt;xz-utils&lt;span class="w"&gt; &lt;/span&gt;tk-dev&lt;span class="w"&gt; &lt;/span&gt;libxml2-dev&lt;span class="w"&gt; &lt;/span&gt;libxmlsec1-dev&lt;span class="w"&gt; &lt;/span&gt;libffi-dev&lt;span class="w"&gt; &lt;/span&gt;liblzma-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Fedora 22+ (dnf)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dnf&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;gcc&lt;span class="w"&gt; &lt;/span&gt;patch&lt;span class="w"&gt; &lt;/span&gt;zlib-devel&lt;span class="w"&gt; &lt;/span&gt;bzip2&lt;span class="w"&gt; &lt;/span&gt;bzip2-devel&lt;span class="w"&gt; &lt;/span&gt;readline-devel&lt;span class="w"&gt; &lt;/span&gt;sqlite&lt;span class="w"&gt; &lt;/span&gt;sqlite-devel&lt;span class="w"&gt; &lt;/span&gt;openssl-devel&lt;span class="w"&gt; &lt;/span&gt;tk-devel&lt;span class="w"&gt; &lt;/span&gt;libffi-devel&lt;span class="w"&gt; &lt;/span&gt;xz-devel&lt;span class="w"&gt; &lt;/span&gt;libuuid-devel&lt;span class="w"&gt; &lt;/span&gt;gdbm-libs&lt;span class="w"&gt; &lt;/span&gt;libnsl2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Arch Linux (pacman)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;--needed&lt;span class="w"&gt; &lt;/span&gt;base-devel&lt;span class="w"&gt; &lt;/span&gt;openssl&lt;span class="w"&gt; &lt;/span&gt;zlib&lt;span class="w"&gt; &lt;/span&gt;xz&lt;span class="w"&gt; &lt;/span&gt;tk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If your OS is not listed here, please see the &lt;a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment"&gt;complete documentation of suggested build environments&lt;/a&gt; from the developers of &lt;code&gt;pyenv&lt;/code&gt; itself.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;List and Install Python Versions with pyenv&lt;/h2&gt;
&lt;p&gt;With your shell configured and Python build dependencies installed, let’s now ask &lt;code&gt;pyenv&lt;/code&gt; to list all Python versions it knows about. This is a long list, so you might want to use a regular expression to narrow it down.&lt;/p&gt;
&lt;p&gt;In this case, we are asking for a list of all available Python versions from 3.12 to 3.14:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3\\.1[234]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have found your desired version(s) of Python, it/they can be installed with a single command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# installs Python version 3.13.2&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# installs Python version 3.9.17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Allow the installation(s) to complete.&lt;/p&gt;
&lt;p&gt;Repeat for additional Python versions if needed.&lt;/p&gt;
&lt;h2&gt;Verify Installation(s)&lt;/h2&gt;
&lt;p&gt;This command will list the versions of Python pyenv has access to on your system. It also tells you which version is currently used by default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; indicates which version is set to run by default. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;*&lt;span class="w"&gt; &lt;/span&gt;system&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/.pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.2
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Set a Global or Local Python Version&lt;/h2&gt;
&lt;p&gt;If desired, you can make this new version of Python the global or local default.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.2&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# set a global default&lt;/span&gt;
&lt;span class="c1"&gt;# OR&lt;/span&gt;
pyenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# set for a specific project directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code&gt;pyenv versions&lt;/code&gt; again, and you will see the output has changed to your selected version of Python. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;system
*&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.13.2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/.pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Return to System Python&lt;/h2&gt;
&lt;p&gt;If you want to return to your system's stock version of Python, just run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;global&lt;span class="w"&gt; &lt;/span&gt;system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Uninstall a Particular Python Version&lt;/h2&gt;
&lt;p&gt;To remove a specific version of Python from &lt;code&gt;pyenv&lt;/code&gt;, simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv&lt;span class="w"&gt; &lt;/span&gt;uninstall&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.9.17&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# to uninstall Python version 3.9.17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a id="use-venv-to-create-virtual-environments"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Use venv to Create Virtual Environments&lt;/h2&gt;
&lt;p&gt;Advantages of &lt;code&gt;venv&lt;/code&gt; over the older &lt;code&gt;virtualenv&lt;/code&gt; option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Standard Library:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; is part of the Python 3 standard library, so you don't need to install it separately.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lightweight:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; creates environments by creating symbolic links (or copying in some cases) to the base Python installation, making the environments smaller and faster to create than those of &lt;code&gt;virtualenv&lt;/code&gt;, which often copies the entire Python interpreter into the virtual environment's directory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensible:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; environments can be extended and customized. You can use &lt;code&gt;pip&lt;/code&gt; to install any packages you need.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolated:&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; provides proper isolation for your project's dependencies from other Python projects on your system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recommended:&lt;/strong&gt; It is the officially recommended method to create virtual environments in Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To create the virtual environment, navigate to your project directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command to create a new environment is as follows. This command will use the Python interpreter that &lt;code&gt;pyenv&lt;/code&gt; has made active (either globally or locally) to create the environment.&lt;/p&gt;
&lt;p&gt;For Linux and macOS, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv&lt;span class="o"&gt;[&lt;/span&gt;-optional-python-version-number&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new directory called &lt;code&gt;.venv-3.13.2&lt;/code&gt; (for example) at the top level of your project. I like to add the Python version number after &lt;code&gt;.venv&lt;/code&gt; so it is clear exactly which version of Python this virtual environment runs.&lt;/p&gt;
&lt;p&gt;You can choose to name this directory anything you would like. But some variant of &lt;code&gt;.venv&lt;/code&gt; is recommended.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Activate the Virtual Environment&lt;/h2&gt;
&lt;p&gt;From the project's root directory, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;your-venv-directory&lt;span class="o"&gt;]&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And your terminal should indicate the environment is now active.&lt;/p&gt;
&lt;h2&gt;Install Python Packages&lt;/h2&gt;
&lt;p&gt;With your virtual environment activated, install any Python packages your project requires:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# packages required for your project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you install Python packages, they will only run while this virtual environment is active, effectively isolating your project dependencies from the rest of your system.&lt;/p&gt;
&lt;p&gt;Proceed to build and test your Python program as normal.&lt;/p&gt;
&lt;h2&gt;Deactivate the Virtual Environment&lt;/h2&gt;
&lt;p&gt;When you are finished with your coding session, deactivate the virtual environment with this simple command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If needed, you can then switch to another virtual environment running a different version of Python and/or packages to see how these new environments affect your program. &lt;/p&gt;
&lt;h2&gt;Remove a Virtual Environment&lt;/h2&gt;
&lt;p&gt;Since we created the environment in a sub-directory of our project, simply delete the &lt;code&gt;.venv&lt;/code&gt; directory to remove the virtual environment. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/path/to/your/project/.venv-3.9.17
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Go Further with venv&lt;/h2&gt;
&lt;p&gt;For more information about using &lt;code&gt;venv&lt;/code&gt;, I recommend starting with the official documentation:  &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv - Creation of Virtual Environments - docs.python.org&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Basic Dependency Declaration with pip&lt;/h2&gt;
&lt;p&gt;Most Python programs make use of external packages and modules. To ensure your program has the correct version of everything it needs to run properly, it’s a good idea to formally declare all dependencies in a way that can easily be updated and reproduced on another system or new virtual environment.&lt;/p&gt;
&lt;p&gt;Fortunately, Python’s standard package manager &lt;code&gt;pip&lt;/code&gt; makes this easy.&lt;/p&gt;
&lt;h2&gt;Generate a requirements.txt File&lt;/h2&gt;
&lt;p&gt;After our packages are installed, all we need to do is use &lt;code&gt;pip&lt;/code&gt; to generate a &lt;code&gt;requirements.txt&lt;/code&gt; file. This file lists all the installed packages and their versions. To do this, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Anytime your dependencies change, simply re-run the command above, and &lt;code&gt;requirements.txt&lt;/code&gt; will update.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt; can then be used to install the correct version of all dependencies in a new virtual environment or on an entirely new system by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;pip&lt;/code&gt; does not record the version of Python running in this environment. I recommend adding this as a note on your project’s &lt;code&gt;README&lt;/code&gt; or other documentation so you and others have a record of the exact environment variables of when the program was built and tested.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;In Summary&lt;/h2&gt;
&lt;p&gt;For managing multiple Python versions on your system while creating isolated development environments, using &lt;code&gt;pyenv&lt;/code&gt; along with &lt;code&gt;venv&lt;/code&gt; is the recommended and most straightforward approach. Once the virtual environment is running, using &lt;code&gt;pip&lt;/code&gt; to create and update the &lt;code&gt;requirements.txt&lt;/code&gt; file is a simple way to ensure all dependencies can easily be reproduced.&lt;/p&gt;
&lt;p&gt;This guide has helped us create a simple, clean, and flexible virtual development environment.&lt;/p&gt;
&lt;p&gt;If you found this helpful and would like me to write guides for more advanced dependency management with tools like &lt;a href="https://packaging.python.org/en/latest/tutorials/managing-dependencies/"&gt;Pipenv&lt;/a&gt; or &lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt;, please contact me on Bluesky &lt;a href="https://bsky.app/profile/benjaminpatch.com"&gt;@benjaminpatch.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading and I wish you the best in creating and managing all of your Python virtual environments!&lt;/p&gt;
&lt;h2&gt;Additional Information and Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv?tab=readme-ov-file#simple-python-version-management-pyenv"&gt;pyenv Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyenv/pyenv/wiki"&gt;pyenv Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-virtual-environments-a-primer/"&gt;Python Virtual Environments: A Primer - realpython.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv Documentation - python.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/cli/pip_freeze/"&gt;pip freeze - Python Packaging Authority&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="AI in Practice"></category><category term="python"></category><category term="virtual environments"></category><category term="best practices"></category></entry></feed>